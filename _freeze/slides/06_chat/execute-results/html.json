{
  "hash": "a450a78ac360bbfc007309098f81f6d3",
  "result": {
    "markdown": "---\ntitle: Chat \ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: LangChain Tutorial 6\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Chat\n\nLearn how to track and select pertinent information from conversations and data sources, as you build your own chatbot using LangChain.\n\n# Setup\n\n## Python {.smaller}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport param\nimport panel as pn\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.chains import RetrievalQA,  ConversationalRetrievalChain\nfrom langchain.document_loaders import TextLoader\nfrom langchain.vectorstores import DocArrayInMemorySearch\nfrom langchain.text_splitter import CharacterTextSplitter, RecursiveCharacterTextSplitter\nfrom langchain.chains import ConversationalRetrievalChain\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.chains import RetrievalQA\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import Chroma\nimport datetime\nfrom dotenv import load_dotenv, find_dotenv\nimport panel as pn  # GUI\nimport os\nimport openai\n\n# import sys\n# sys.path.append('../..')\n\npn.extension()\n\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n## LangChain plus platform {.smaller}\n\n- If you wish to experiment on `LangChain plus platform`:\n  - Go to [langchain plus platform](https://www.langchain.plus/) and sign up\n  - Create an api key from your account's settings\n   - Use this api key in the code below \n\n. . .\n\n::: {.cell height='81' tags='[]' execution_count=2}\n``` {.python .cell-code}\n# import os\n# os.environ[\"LANGCHAIN_TRACING_V2\"] = \"true\"\n# os.environ[\"LANGCHAIN_ENDPOINT\"] = \"https://api.langchain.plus\"\n# os.environ[\"LANGCHAIN_API_KEY\"] = \"...\"\n```\n:::\n\n\n# Chat System\n\n## Vector Database\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npersist_directory = '../docs/chroma/'\nembedding = OpenAIEmbeddings()\nvectordb = Chroma(persist_directory=persist_directory,\n                  embedding_function=embedding)\n```\n:::\n\n\n## Question and similarity search\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nquestion = \"What are major topics for this class?\"\ndocs = vectordb.similarity_search(question, k=3)\nlen(docs)\n```\n:::\n\n\n- 3\n\n## OpenAI model\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nllm_name = \"gpt-3.5-turbo\"\n\nllm = ChatOpenAI(model_name=llm_name, temperature=0)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nllm.predict(\"Hello world!\")\n```\n:::\n\n\n- 'Hello! How can I assist you today?'\n\n## Prompt template\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntemplate = \"\"\"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer. Use three sentences maximum. Keep the answer as concise as possible. Always say \"thanks for asking!\" at the end of the answer. \n{context}\nQuestion: {question}\nHelpful Answer:\"\"\"\nQA_CHAIN_PROMPT = PromptTemplate(\n    input_variables=[\"context\", \"question\"], template=template,)\n```\n:::\n\n\n## Run chain\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nquestion = \"Is probability a class topic?\"\n\nqa_chain = RetrievalQA.from_chain_type(llm,\n                                       retriever=vectordb.as_retriever(),\n                                       return_source_documents=True,\n                                       chain_type_kwargs={\"prompt\": QA_CHAIN_PROMPT})\n\n\nresult = qa_chain({\"query\": question})\n\nresult[\"result\"]\n```\n:::\n\n\n- 'Yes, probability is a class topic. Thanks for asking!'\n\n# Memory\n\n## ConversationBufferMemory\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmemory = ConversationBufferMemory(\n    memory_key=\"chat_history\",\n    return_messages=True\n)\n```\n:::\n\n\n## ConversationalRetrievalChain\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nretriever = vectordb.as_retriever()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nqa = ConversationalRetrievalChain.from_llm(\n    llm,\n    retriever=retriever,\n    memory=memory\n)\n```\n:::\n\n\n## Question and result\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nquestion = \"Is probability a class topic?\"\nresult = qa({\"question\": question})\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nresult['answer']\n```\n:::\n\n\n- 'Yes, probability is a topic that will be covered in this class. The instructor assumes familiarity with basic probability and statistics.'\n\n## Second question {.smaller}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nquestion = \"why are those prerequesites needed?\"\nresult = qa({\"question\": question})\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nresult['answer']\n```\n:::\n\n\n- 'Familiarity with basic probability and statistics is needed as prerequisites because the course will involve concepts and techniques from these fields. The instructor assumes that students already know what random variables, expectation, variance, and probability distributions are. This knowledge is necessary to understand and apply the machine learning algorithms and models that will be taught in the course. Additionally, some of the material covered in the course may require a refresher on probability and statistics, so the discussion sections will provide an opportunity to review these concepts.'\n\n# Chatbot for Your Documents\n\nCreate a chatbot that works on your documents\n\n## Helper function: load_db {.smaller}\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndef load_db(file, chain_type, k):\n    # load documents\n    loader = PyPDFLoader(file)\n    documents = loader.load()\n    # split documents\n    text_splitter = RecursiveCharacterTextSplitter(\n        chunk_size=1000, chunk_overlap=150)\n    docs = text_splitter.split_documents(documents)\n    # define embedding\n    embeddings = OpenAIEmbeddings()\n    # create vector database from data\n    db = DocArrayInMemorySearch.from_documents(docs, embeddings)\n    # define retriever\n    retriever = db.as_retriever(\n        search_type=\"similarity\", search_kwargs={\"k\": k})\n    # create a chatbot chain. Memory is managed externally.\n    qa = ConversationalRetrievalChain.from_llm(\n        llm=ChatOpenAI(model_name=llm_name, temperature=0),\n        chain_type=chain_type,\n        retriever=retriever,\n        return_source_documents=True,\n        return_generated_question=True,\n    )\n    return qa\n```\n:::\n\n\n## Helper function: cbfs {.smaller}\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nclass cbfs(param.Parameterized):\n    chat_history = param.List([])\n    answer = param.String(\"\")\n    db_query = param.String(\"\")\n    db_response = param.List([])\n\n    def __init__(self,  **params):\n        super(cbfs, self).__init__(**params)\n        self.panels = []\n        self.loaded_file = \"../docs/cs229_lectures/MachineLearning-Lecture01.pdf\"\n        self.qa = load_db(self.loaded_file, \"stuff\", 4)\n\n    def call_load_db(self, count):\n        if count == 0 or file_input.value is None:  # init or no file specified :\n            return pn.pane.Markdown(f\"Loaded File: {self.loaded_file}\")\n        else:\n            file_input.save(\"temp.pdf\")  # local copy\n            self.loaded_file = file_input.filename\n            button_load.button_style = \"outline\"\n            self.qa = load_db(\"temp.pdf\", \"stuff\", 4)\n            button_load.button_style = \"solid\"\n        self.clr_history()\n        return pn.pane.Markdown(f\"Loaded File: {self.loaded_file}\")\n\n    def convchain(self, query):\n        if not query:\n            return pn.WidgetBox(pn.Row('User:', pn.pane.Markdown(\"\", width=600)), scroll=True)\n        result = self.qa(\n            {\"question\": query, \"chat_history\": self.chat_history})\n        self.chat_history.extend([(query, result[\"answer\"])])\n        self.db_query = result[\"generated_question\"]\n        self.db_response = result[\"source_documents\"]\n        self.answer = result['answer']\n        self.panels.extend([\n            pn.Row('User:', pn.pane.Markdown(query, width=600)),\n            pn.Row('ChatBot:', pn.pane.Markdown(self.answer,\n                   width=600, style={'background-color': '#F6F6F6'}))\n        ])\n        inp.value = ''  # clears loading indicator when cleared\n        return pn.WidgetBox(*self.panels, scroll=True)\n\n    @param.depends('db_query ', )\n    def get_lquest(self):\n        if not self.db_query:\n            return pn.Column(\n                pn.Row(pn.pane.Markdown(f\"Last question to DB:\",\n                       styles={'background-color': '#F6F6F6'})),\n                pn.Row(pn.pane.Str(\"no DB accesses so far\"))\n            )\n        return pn.Column(\n            pn.Row(pn.pane.Markdown(f\"DB query:\", styles={\n                   'background-color': '#F6F6F6'})),\n            pn.pane.Str(self.db_query)\n        )\n\n    @param.depends('db_response', )\n    def get_sources(self):\n        if not self.db_response:\n            return\n        rlist = [pn.Row(pn.pane.Markdown(f\"Result of DB lookup:\",\n                        styles={'background-color': '#F6F6F6'}))]\n        for doc in self.db_response:\n            rlist.append(pn.Row(pn.pane.Str(doc)))\n        return pn.WidgetBox(*rlist, width=600, scroll=True)\n\n    @param.depends('convchain', 'clr_history')\n    def get_chats(self):\n        if not self.chat_history:\n            return pn.WidgetBox(pn.Row(pn.pane.Str(\"No History Yet\")), width=600, scroll=True)\n        rlist = [pn.Row(pn.pane.Markdown(\n            f\"Current Chat History variable\", styles={'background-color': '#F6F6F6'}))]\n        for exchange in self.chat_history:\n            rlist.append(pn.Row(pn.pane.Str(exchange)))\n        return pn.WidgetBox(*rlist, width=600, scroll=True)\n\n    def clr_history(self, count=0):\n        self.chat_history = []\n        return\n\n```\n:::\n\n\n## Create Chatbot {.smaller}\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ncb = cbfs()\n\nfile_input = pn.widgets.FileInput(accept='.pdf')\nbutton_load = pn.widgets.Button(name=\"Load DB\", button_type='primary')\nbutton_clearhistory = pn.widgets.Button(\n    name=\"Clear History\", button_type='warning')\nbutton_clearhistory.on_click(cb.clr_history)\ninp = pn.widgets.TextInput(placeholder='Enter text here…')\n\nbound_button_load = pn.bind(cb.call_load_db, button_load.param.clicks)\nconversation = pn.bind(cb.convchain, inp)\n\njpg_pane = pn.pane.Image('../imges/convchain.png')\n\ntab1 = pn.Column(\n    pn.Row(inp),\n    pn.layout.Divider(),\n    pn.panel(conversation,  loading_indicator=True, height=300),\n    pn.layout.Divider(),\n)\ntab2 = pn.Column(\n    pn.panel(cb.get_lquest),\n    pn.layout.Divider(),\n    pn.panel(cb.get_sources),\n)\ntab3 = pn.Column(\n    pn.panel(cb.get_chats),\n    pn.layout.Divider(),\n)\ntab4 = pn.Column(\n    pn.Row(file_input, button_load, bound_button_load),\n    pn.Row(button_clearhistory, pn.pane.Markdown(\n        \"Clears chat history. Can use to start a new topic\")),\n    pn.layout.Divider(),\n    pn.Row(jpg_pane.clone(width=400))\n)\ndashboard = pn.Column(\n    pn.Row(pn.pane.Markdown('# ChatWithYourData_Bot')),\n    pn.Tabs(('Conversation', tab1), ('Database', tab2),\n            ('Chat History', tab3), ('Configure', tab4))\n)\ndashboard\n```\n:::\n\n\n## Panel user interface\n\n![](/images/qa_1.png)\n\n## Question\n\n![](/images/qa_2.png)\n\n## Databse\n\n![](/images/qa_3.png)\n\n## Chat history\n\n![](/images/qa_4.png)\n\n## Configurations\n\n![](/images/qa_5.png)\n\n## Adapt the code\n\n- Feel free to copy this code and modify it to add your own features. \n\n- You can try alternate memory and retriever models by changing the configuration in `load_db` function and the `convchain` method. [Panel](https://panel.holoviz.org/) and [Param](https://param.holoviz.org/) have many useful features and widgets you can use to extend the GUI.\n\n# Acknowledgments\n\n- This tutorial is mainly based on the excellent course [\"LangChain: Chat with Your DataI\"](https://www.deeplearning.ai/short-courses/langchain-chat-with-your-data/) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.\n\n- Panel based chatbot inspired by Sophia Yang, [github](https://github.com/sophiamyang/tutorials-LangChain)\n\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** 👍\n\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-rag/)**\n\n",
    "supporting": [
      "06_chat_files"
    ],
    "filters": [],
    "includes": {}
  }
}