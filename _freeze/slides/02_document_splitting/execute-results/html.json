{
  "hash": "4a5dace13523adf052148e3ce3bb7cac",
  "result": {
    "markdown": "---\ntitle: Document Splitting\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: LangChain Tutorial 2\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Document Splitting\n\nDiscover the best practices and considerations for splitting data.\n\n# Setup\n\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom langchain.text_splitter import MarkdownHeaderTextSplitter\nfrom langchain.text_splitter import TokenTextSplitter\nfrom langchain.document_loaders import NotionDirectoryLoader\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter\nfrom dotenv import load_dotenv, find_dotenv\nimport os\nimport openai\n# import sys\n# sys.path.append('../..')\n\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n# Splitting\n\n## Character Text Splitter\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nchunk_size = 26\nchunk_overlap = 4\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nc_splitter = CharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap\n)\n```\n:::\n\n\n## Text 1\n\n- Why doesn't this split the string below?\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntext1 = 'abcdefghijklmnopqrstuvwxyz'\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nr_splitter.split_text(text1)\n```\n:::\n\n\n- ['abcdefghijklmnopqrstuvwxyz']\n\n## Text 2\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntext2 = 'abcdefghijklmnopqrstuvwxyzabcdefg'\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nr_splitter.split_text(text2)\n```\n:::\n\n\n- ['abcdefghijklmnopqrstuvwxyz', 'wxyzabcdefg']\n\n\n## Text 3\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntext3 = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nr_splitter.split_text(text3)\n```\n:::\n\n\n- ['a b c d e f g h i j k l m', 'l m n o p q r s t u v w x', 'w x y z']\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nc_splitter.split_text(text3)\n```\n:::\n\n\n- ['a b c d e f g h i j k l m n o p q r s t u v w x y z']\n\n## CharacterTextSplitter\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nc_splitter = CharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap,\n    separator=' '\n)\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nc_splitter.split_text(text3)\n```\n:::\n\n\n- ['a b c d e f g h i j k l m', 'l m n o p q r s t u v w x', 'w x y z']\n\n# Recursive Splitting Details\n\n## RecursiveCharacterTextSplitter {.smaller}\n\n- `RecursiveCharacterTextSplitter` is recommended for generic text. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nsome_text = \"\"\"When writing documents, writers will use document structure to group content. \\\nThis can convey to the reader, which idea's are related. For example, closely related ideas \\\nare in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \\n\\n  \\\nParagraphs are often delimited with a carriage return or two carriage returns. \\\nCarriage returns are the \"backslash n\" you see embedded in this string. \\\nSentences have a period at the end, but also, have a space.\\\nand words are separated by space.\"\"\"\n```\n:::\n\n\n## Define splitter\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nc_splitter = CharacterTextSplitter(\n    chunk_size=450,\n    chunk_overlap=0,\n    separator=' '\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=450,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \" \", \"\"]\n)\n```\n:::\n\n\n## Character Splitter output\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nc_splitter.split_text(some_text)\n```\n:::\n\n\n- ['When writing documents, writers will use document structure to group content. This can convey to the reader, which idea\\'s are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \\n\\n Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the \"backslash n\" you see embedded in this string. Sentences have a period at the end, but also,',\n 'have a space.and words are separated by space.']\n\n## Recursive Splitter output\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nr_splitter.split_text(some_text)\n```\n:::\n\n\n- [\"When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.\",\n 'Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the \"backslash n\" you see embedded in this string. Sentences have a period at the end, but also, have a space.and words are separated by space.']\n\n## Adapt splitter 1 {.smaller}\n\n- Let's reduce the chunk size a bit and add a period to our separators:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=150,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \"\\. \", \" \", \"\"]\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nr_splitter.split_text(some_text)\n```\n:::\n\n\n- [\"When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related\",\n '. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.',\n 'Paragraphs are often delimited with a carriage return or two carriage returns',\n '. Carriage returns are the \"backslash n\" you see embedded in this string',\n '. Sentences have a period at the end, but also, have a space.and words are separated by space.']\n\n## Adapt splitter 2 {.smaller}\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=150,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \"(?<=\\. )\", \" \", \"\"]\n)\nr_splitter.split_text(some_text)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nr_splitter.split_text(some_text)\n```\n:::\n\n\n- [\"When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related.\",\n 'For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.',\n 'Paragraphs are often delimited with a carriage return or two carriage returns.',\n 'Carriage returns are the \"backslash n\" you see embedded in this string.',\n 'Sentences have a period at the end, but also, have a space.and words are separated by space.']\n\n# Split a Document\n\n## Load PDF\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nloader = PyPDFLoader(\"../docs/cs229_lectures/MachineLearning-Lecture01.pdf\")\npages = loader.load()\n```\n:::\n\n\n## Define splitter\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ntext_splitter = CharacterTextSplitter(\n    separator=\"\\n\",\n    chunk_size=1000,\n    chunk_overlap=150,\n    length_function=len\n)\n```\n:::\n\n\n## Split document\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndocs = text_splitter.split_documents(pages)\n```\n:::\n\n\n## Inspect data\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nlen(docs)\n```\n:::\n\n\n- 77\n\n. . .\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nlen(pages)\n```\n:::\n\n\n- 22\n\n## Inspect data\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nprint(docs[0].page_content[300:800])\n```\n:::\n\n\n- my name's  Andrew Ng and I'll be instru ctor for this class. And so \nI personally work in machine learning, and I' ve worked on it for about 15 years now, and \nI actually think that machine learning is th e most exciting field of all the computer \nsciences. So I'm actually always excited about  teaching this class. Sometimes I actually \nthink that machine learning is not only the most exciting thin g in computer science, but \nthe most exciting thing in all of human e ndeavor, so maybe a little b\n\n# Split Notion data\n\n## Load data\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nloader = NotionDirectoryLoader(\"../docs/Notion_DB\")\nnotion_db = loader.load()\n```\n:::\n\n\n## Define splitter\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ntext_splitter = CharacterTextSplitter(\n    separator=\"\\n\",\n    chunk_size=1000,\n    chunk_overlap=150,\n    length_function=len\n)\n```\n:::\n\n\n## Split document\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndocs = text_splitter.split_documents(notion_db)\n```\n:::\n\n\n## Inspect data\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nlen(notion_db)\n```\n:::\n\n\n- 1\n\n. . .\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nlen(docs)\n```\n:::\n\n\n- 2\n\n\n## Inspect data {smaller}\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nprint(docs[0].page_content)\n```\n:::\n\n\n```markdown\n# Getting Started\n👋 Welcome to Notion!\nHere are the basics:\n- [ ]  Click anywhere and just start typing\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.\n    \n    [Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)\n    \n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\n- [ ]  See the `⋮⋮` to the left of this checkbox on hover? Click and drag to move this line\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\n- This is a toggle block. Click the little triangle to see more useful tips!\n    - [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community\n\n```\n\n# Token splitting\n\n## Basics\n\n- We can also split on token count explicity, if we want\n\n- This can be useful because LLMs often have context windows designated in tokens\n\n- Tokens are often ~4 characters.\n\n\n## TokenTextSplitter 1\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ntext_splitter = TokenTextSplitter(chunk_size=1, chunk_overlap=0)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ntext1 = \"foo bar bazzyfoo\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ntext_splitter.split_text(text1)\n```\n:::\n\n\n- ['foo', ' bar', ' b', 'az', 'zy', 'foo']\n\n## TokenTextSplitter 2 {.smaller}\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ntext_splitter = TokenTextSplitter(chunk_size=10, chunk_overlap=0)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ndocs = text_splitter.split_documents(pages)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndocs[0]\n```\n:::\n\n\n- Document(page_content='MachineLearning-Lecture01  \\n', metadata={'source': '../docs/cs229_lectures/MachineLearning-Lecture01.pdf', 'page': 0})\n\n. . .\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\npages[0].metadata\n```\n:::\n\n\n- {'source': '../docs/cs229_lectures/MachineLearning-Lecture01.pdf', 'page': 0}\n\n# Context Aware Splitting with Markdown\n\n## Basics\n\n- Chunking aims to keep text with common context together.\n\n- A text splitting often uses sentences or other delimiters to keep related text together but many documents (such as Markdown) have structure (headers) that can be explicitly used in splitting.\n\n- We can use `MarkdownHeaderTextSplitter` to preserve header metadata in our chunks\n\n## Markdown example\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nmarkdown_document = \"\"\"# Title\\n\\n \\\n## Chapter 1\\n\\n \\\nHi this is Jim\\n\\n Hi this is Joe\\n\\n \\\n### Section \\n\\n \\\nHi this is Lance \\n\\n \n## Chapter 2\\n\\n \\\nHi this is Molly\"\"\"\n```\n:::\n\n\n## Headers to split on\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n    (\"##\", \"Header 2\"),\n    (\"###\", \"Header 3\"),\n]\n```\n:::\n\n\n## MarkdownHeaderTextSplitter\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nmarkdown_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on\n)\n```\n:::\n\n\n## Split text\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nmd_header_splits = markdown_splitter.split_text(markdown_document)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nmd_header_splits[0]\n```\n:::\n\n\n- Document(page_content='Hi this is Jim  \\nHi this is Joe', metadata={'Header 1': 'Title', 'Header 2': 'Chapter 1'})\n\n. . .\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nmd_header_splits[1]\n```\n:::\n\n\n- Document(page_content='Hi this is Lance', metadata={'Header 1': 'Title', 'Header 2': 'Chapter 1', 'Header 3': 'Section'})\n\n# Splitting Notion Markdown\n\n## Load data\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nloader = NotionDirectoryLoader(\"../docs/Notion_DB\")\ndocs = loader.load()\n```\n:::\n\n\n## Join data {.smaller}\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\ntxt = ' '.join([d.page_content for d in docs])\ntxt\n```\n:::\n\n\n- '# Getting Started\\n\\n👋 Welcome to Notion!\\n\\nHere are the basics:\\n\\n- [ ]  Click anywhere and just start typing\\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.\\n    \\n    [Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)\\n    \\n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\\n- [ ]  See the `⋮⋮` to the left of this checkbox on hover? Click and drag to move this line\\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\\n- This is a toggle block. Click the little triangle to see more useful tips!\\n    - [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community\\n    - [Help & Support](https://www.notion.so/e040febf70a94950b8620e6f00005004?pvs=21): ****Guides and FAQs for everything in Notion\\n    - Stay organized with your sidebar and nested pages:\\n        \\n        ![Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif](Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif)\\n        \\n    \\n\\nSee it in action:\\n\\n[1 minute](https://youtu.be/TL_N2pmh9O0)\\n\\n1 minute\\n\\n[4 minutes](https://youtu.be/FXIrojSK3Jo)\\n\\n4 minutes\\n\\n[2 minutes](https://youtu.be/2Pwzff-uffU)\\n\\n2 minutes\\n\\n[2 minutes](https://youtu.be/O8qdvSxDYNY)\\n\\n2 minutes\\n\\nVisit our [YouTube channel](http://youtube.com/c/notion) to watch 50+ more tutorials\\n\\n👉**Have a question?** Click the `?` at the bottom right for more guides, or to send us a message.'\n\n## Define Splitter\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n    (\"##\", \"Header 2\"),\n]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nmarkdown_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on\n)\n```\n:::\n\n\n## Split text\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nmd_header_splits = markdown_splitter.split_text(txt)\n```\n:::\n\n\n## Output {.smaller}\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nmd_header_splits[0]\n```\n:::\n\n\n- Document(page_content='👋 Welcome to Notion!  \\nHere are the basics:  \\n- [ ]  Click anywhere and just start typing\\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.  \\n[Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)  \\n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\\n- [ ]  See the `⋮⋮` to the left of this checkbox on hover? Click and drag to move this line\\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\\n- This is a toggle block. Click the little triangle to see more useful tips!\\n- [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community\\n- [Help & Support](https://www.notion.so/e040febf70a94950b8620e6f00005004?pvs=21): ****Guides and FAQs for everything in Notion\\n- Stay organized with your sidebar and nested pages:  \\n![Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif](Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif)  \\nSee it in action:  \\n[1 minute](https://youtu.be/TL_N2pmh9O0)  \\n1 minute  \\n[4 minutes](https://youtu.be/FXIrojSK3Jo)  \\n4 minutes  \\n[2 minutes](https://youtu.be/2Pwzff-uffU)  \\n2 minutes  \\n[2 minutes](https://youtu.be/O8qdvSxDYNY)  \\n2 minutes  \\nVisit our [YouTube channel](http://youtube.com/c/notion) to watch 50+ more tutorials  \\n👉**Have a question?** Click the `?` at the bottom right for more guides, or to send us a message.', metadata={'Header 1': 'Getting Started'})\n\n# Acknowledgments\n\n- This tutorial is mainly based on the excellent course [\"LangChain: Chat with Your DataI\"](https://www.deeplearning.ai/short-courses/langchain-chat-with-your-data/) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** 👍\n\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-rag/)**\n\n",
    "supporting": [
      "02_document_splitting_files"
    ],
    "filters": [],
    "includes": {}
  }
}