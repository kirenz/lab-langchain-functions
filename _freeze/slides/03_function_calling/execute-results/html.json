{
  "hash": "3f057f862fc3a489176ee0eedd5a1cde",
  "result": {
    "markdown": "---\ntitle: OpenAI Function Calling In LangChain\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: Tutorial 3\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# OpenAI Function Calling In LangChain\n\n\n# Setup {.smaller}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport openai\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) \nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom typing import List\nfrom pydantic import BaseModel, Field\n\nfrom langchain.utils.openai_functions import convert_pydantic_to_openai_function\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import ChatPromptTemplate\n```\n:::\n\n\n# Pydantic Syntax\n\n## Basics\n\n- Pydantic data classes are a blend of Python's data classes with the validation power of Pydantic. \n\n- They offer a concise way to define data structures while ensuring that the data adheres to specified types and constraints.\n\n## Create class with standard Python\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass User:\n    def __init__(self, name: str, age: int, email: str):\n        self.name = name\n        self.age = age\n        self.email = email\n```\n:::\n\n\n## Creata an instance {.smaller}\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfoo = User(name=\"Joe\",age=32, email=\"joe@gmail.com\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfoo.name\n```\n:::\n\n\n- 'Joe'\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfoo = User(name=\"Joe\",age=\"bar\", email=\"joe@gmail.com\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfoo.age\n```\n:::\n\n\n- 'bar'\n\n## Create class with Pydantic\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nclass pUser(BaseModel):\n    name: str\n    age: int\n    email: str\n```\n:::\n\n\n## Create instance {.smaller}\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfoo_p = pUser(name=\"Jane\", age=32, email=\"jane@gmail.com\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfoo_p.name\n```\n:::\n\n\n- 'Jane'\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfoo_p = pUser(name=\"Jane\", age=\"bar\", email=\"jane@gmail.com\")\n```\n:::\n\n\n- ValidationError: 1 validation error for pUser age value is not a valid integer (type=type_error.integer)\n\n\n## Nest data structures\n\n- Define class type which includes another object (nest objects)\n\n. . .\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nclass Class(BaseModel):\n    students: List[pUser]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nobj = Class(\n    students=[pUser(name=\"Jane\", age=32, email=\"jane@gmail.com\")]\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nobj\n```\n:::\n\n\n- Class(students=[pUser(name='Jane', age=32, email='jane@gmail.com')])\n\n# Pydantic to OpenAI function definition\n\n## Weather search function\n\n- [Docstring](https://peps.python.org/pep-0257/#what-is-a-docstring) is required\n\n. . .\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nclass WeatherSearch(BaseModel):\n    \"\"\"Call this with an airport code to get the weather at that airport\"\"\"\n    airport_code: str = Field(description=\"airport code to get weather for\")\n```\n:::\n\n\n- Pass in class type\n\n. . .\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nweather_function = convert_pydantic_to_openai_function(WeatherSearch)\n```\n:::\n\n\n## Inspect class type\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nweather_function\n```\n:::\n\n\n{'name': 'WeatherSearch',\n 'description': 'Call this with an airport code to get the weather at that airport',\n 'parameters': {'title': 'WeatherSearch',\n  'description': 'Call this with an airport code to get the weather at that airport',\n  'type': 'object',\n  'properties': {'airport_code': {'title': 'Airport Code',\n    'description': 'airport code to get weather for',\n    'type': 'string'}},\n  'required': ['airport_code']}}\n\n\n# Combine OpenAI with LEL\n\n## Use model directly\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmodel = ChatOpenAI()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nmodel.invoke(\"what is the weather in SF today?\", functions=[weather_function])\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}})\n\n## Use bind \n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nmodel_with_function = model.bind(functions=[weather_function])\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nmodel_with_function.invoke(\"what is the weather in sf?\")\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}})\n\n## Forcing it to use a function\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmodel_with_forced_function = model.bind(functions=[weather_function], function_call={\"name\":\"WeatherSearch\"})\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmodel_with_forced_function.invoke(\"what is the weather in sf?\")\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}})\n\n. . .\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nmodel_with_forced_function.invoke(\"hi!\")\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}})\n\n# Using in a chain\n\n## Prompt template\n\nWe can use this model bound to function in a chain as we normally would\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nprompt = ChatPromptTemplate.from_messages([\n    (\"system\", \"You are a helpful assistant\"),\n    (\"user\", \"{input}\")\n])\n```\n:::\n\n\n## Chain\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nchain = prompt | model_with_function\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nchain.invoke({\"input\": \"what is the weather in sf?\"})\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}})\n\n## Using multiple functions\n\n\n## Create ArtistSearch function {.smaller}\n\nEven better, we can pass a set of function and let the LLM decide which to use based on the question context.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nclass ArtistSearch(BaseModel):\n    \"\"\"Call this to get the names of songs by a particular artist\"\"\"\n    artist_name: str = Field(description=\"name of artist to look up\")\n    n: int = Field(description=\"number of results\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nfunctions = [\n    convert_pydantic_to_openai_function(WeatherSearch),\n    convert_pydantic_to_openai_function(ArtistSearch),\n]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nmodel_with_functions = model.bind(functions=functions)\n```\n:::\n\n\n## Invoke function with weather {.smaller}\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nmodel_with_functions.invoke(\"what is the weather in sf?\")\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}})\n\n## Invoke function with three songs {.smaller}\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nmodel_with_functions.invoke(\"what are three songs by taylor swift?\")\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'ArtistSearch', 'arguments': '{\\n  \"artist_name\": \"taylor swift\",\\n  \"n\": 3\\n}'}})\n\n## Invoke function with hi {.smaller}\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nmodel_with_functions.invoke(\"hi!\")\n```\n:::\n\n\n- AIMessage(content='Hello! How can I assist you today?')\n\n\n\n# Acknowledgments\n\n- This tutorial is mainly based on the excellent course [\"Functions, Tools and Agents with LangChain\"](https://www.deeplearning.ai/short-courses/functions-tools-agents-langchain/?) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** üëç\n\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-functions/)**\n\n",
    "supporting": [
      "03_function_calling_files"
    ],
    "filters": [],
    "includes": {}
  }
}