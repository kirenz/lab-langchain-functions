{
  "hash": "6a9abc060a40df894a3508930b0a7ada",
  "result": {
    "markdown": "---\ntitle: Vectorstore Retrieval\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: LangChain Tutorial 4\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Vectorstore Retrieval\n\nGrasp advanced techniques for accessing and indexing data in the vector store, enabling you to retrieve the most relevant information beyond semantic queries.\n\n# Setup\n\n## Python {.smaller}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.retrievers import TFIDFRetriever\nfrom langchain.retrievers import SVMRetriever\nfrom langchain.retrievers.document_compressors import LLMChainExtractor\nfrom langchain.retrievers import ContextualCompressionRetriever\nfrom langchain.chains.query_constructor.base import AttributeInfo\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\nfrom langchain.llms import OpenAI\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import Chroma\nfrom dotenv import load_dotenv, find_dotenv\nimport os\nimport openai\n# import sys\n# sys.path.append('../..')\n\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n# Vector Database\n\n## Setup\n\nLet's get our vectorDB from Tutorial 3.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npersist_directory = '../docs/chroma/'\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nembedding = OpenAIEmbeddings()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nvectordb = Chroma(\n    persist_directory=persist_directory,\n    embedding_function=embedding\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(vectordb._collection.count())\n```\n:::\n\n\n- 209\n\n## Example\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntexts = [\n    \"\"\"The Amanita phalloides has a large and imposing epigeous (aboveground) fruiting body (basidiocarp).\"\"\",\n    \"\"\"A mushroom with a large fruiting body is the Amanita phalloides. Some varieties are all-white.\"\"\",\n    \"\"\"A. phalloides, a.k.a Death Cap, is one of the most poisonous of all known mushrooms.\"\"\",\n]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsmalldb = Chroma.from_texts(texts, embedding=embedding)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nquestion = \"Tell me about all-white mushrooms with large fruiting bodies\"\n```\n:::\n\n\n## Result 1\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nsmalldb.similarity_search(question, k=2)\n```\n:::\n\n\n- [Document(page_content='A mushroom with a large fruiting body is the Amanita phalloides. Some varieties are all-white.', metadata={}),\n Document(page_content='The Amanita phalloides has a large and imposing epigeous (aboveground) fruiting body (basidiocarp).', metadata={})]\n\n\n## Result 2\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nsmalldb.max_marginal_relevance_search(question, k=2, fetch_k=3)\n```\n:::\n\n\n- [Document(page_content='A mushroom with a large fruiting body is the Amanita phalloides. Some varieties are all-white.', metadata={}),\n Document(page_content='A. phalloides, a.k.a Death Cap, is one of the most poisonous of all known mushrooms.', metadata={})]\n\n# Addressing Diversity\n\n## Basics\n\n- Addressing Diversity: Maximum marginal relevance (MMR)\n\n- In Tutorial 3 we introduced one problem: how to enforce diversity in the search results.\n \n- `Maximum marginal relevance` strives to achieve both relevance to the query *and diversity* among the results.\n\n## Question about matlab\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nquestion = \"what did they say about matlab?\"\n```\n:::\n\n\n- Similarity search\n\n. . .\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndocs_ss = vectordb.similarity_search(question, k=3)\n```\n:::\n\n\n## Results\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndocs_ss[0].page_content[:100]\n```\n:::\n\n\n- 'those homeworks will be done in either MATLA B or in Octave, which is sort of — I \\nknow some people '\n\n. . .\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndocs_ss[1].page_content[:100]\n```\n:::\n\n\n- 'those homeworks will be done in either MATLA B or in Octave, which is sort of — I \\nknow some people '\n\n## MMR {.smaller}\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndocs_mmr = vectordb.max_marginal_relevance_search(question, k=3)\n```\n:::\n\n\n- Note the difference in results with `MMR`.\n\n. . .\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndocs_mmr[0].page_content[:100]\n```\n:::\n\n\n- 'those homeworks will be done in either MATLA B or in Octave, which is sort of — I \\nknow some people '\n\n. . .\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndocs_mmr[1].page_content[:100]\n```\n:::\n\n\n- \"mathematical work, he feels like he's disc overing truth and beauty in the universe. And \\nhe says it\"\n\n# Addressing Specificity: Metadata\n\n## Basics\n\n- Addressing Specificity: working with metadata\n\n- In Tutorial 3, we showed that a question about the third lecture can include results from other lectures as well.\n\n- To address this, many vectorstores support operations on `metadata`.\n\n- `metadata` provides context for each embedded chunk.\n\n## Question about third lecture\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nquestion = \"what did they say about regression in the third lecture?\"\n```\n:::\n\n\n- Similarity search\n\n. . .\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndocs = vectordb.similarity_search(\n    question,\n    k=3,\n    filter={\"source\": \"../docs/cs229_lectures/MachineLearning-Lecture03.pdf\"}\n)\n```\n:::\n\n\n## Result\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfor d in docs:\n    print(d.metadata)\n```\n:::\n\n\n- {'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 0}\n- {'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 14}\n- {'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 4}\n\n# Addressing Specificity: Self-query retriever\n\n## Basics {.smaller}\n\n- Addressing Specificity: working with metadata using self-query retriever\n\n- But we have an interesting challenge: we often want to infer the metadata from the query itself.\n\n- To address this, we can use `SelfQueryRetriever`, which uses an LLM to extract:\n \n1. The `query` string to use for vector search\n2. A metadata filter to pass in as well\n\n- Most vector databases support metadata filters, so this doesn't require any new databases or indexes.\n\n## metadata_field_info\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nmetadata_field_info = [\n    AttributeInfo(\n        name=\"source\",\n        description=\"The lecture the chunk is from, should be one of `../docs/cs229_lectures/MachineLearning-Lecture01.pdf`, `../docs/cs229_lectures/MachineLearning-Lecture02.pdf`, or `../docs/cs229_lectures/MachineLearning-Lecture03.pdf`\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"page\",\n        description=\"The page from the lecture\",\n        type=\"integer\",\n    ),\n]\n```\n:::\n\n\n## document_content_description\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndocument_content_description = \"Lecture notes\"\nllm = OpenAI(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm,\n    vectordb,\n    document_content_description,\n    metadata_field_info,\n    verbose=True\n)\n```\n:::\n\n\n## Question about third lecture\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nquestion = \"what did they say about regression in the third lecture?\"\n```\n:::\n\n\n- Retriever\n\n. . .\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndocs = retriever.get_relevant_documents(question)\n```\n:::\n\n\n- *You will receive a warning* about predict_and_parse being deprecated the first time you executing the next line. This can be safely ignored.\n\n## Result\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nfor doc in docs:\n    print(doc.metadata)\n```\n:::\n\n\n```markdown\n{'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 14}\n{'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 0}\n{'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 10}\n{'source': '../docs/cs229_lectures/MachineLearning-Lecture03.pdf', 'page': 10}\n```\n\n# Additional Tricks: Compression\n\n## Basics {.smaller}\n\n- Another approach for improving the quality of retrieved docs is compression.\n\n- Information most relevant to a query may be buried in a document with a lot of irrelevant text. \n\n- Passing that full document through your application can lead to more expensive LLM calls and poorer responses.\n\n- Contextual compression is meant to fix this. \n\n## Helper function: pretty print\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndef pretty_print_docs(docs):\n    print(f\"\\n{'-' * 100}\\n\".join([f\"Document {i+1}:\\n\\n\" +\n          d.page_content for i, d in enumerate(docs)]))\n\n```\n:::\n\n\n## Load LLM\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Wrap our vectorstore\nllm = OpenAI(temperature=0)\ncompressor = LLMChainExtractor.from_llm(llm)\n```\n:::\n\n\n## ContextualCompressionRetriever\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ncompression_retriever = ContextualCompressionRetriever(\n    base_compressor=compressor,\n    base_retriever=vectordb.as_retriever()\n)\n```\n:::\n\n\n## Question about matlab\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nquestion = \"what did they say about matlab?\"\n```\n:::\n\n\n- Retriever\n\n. . .\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ncompressed_docs = compression_retriever.get_relevant_documents(question)\n```\n:::\n\n\n## Result {.smaller}\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\npretty_print_docs(compressed_docs)\n```\n:::\n\n\n```markdown\nDocument 1:\n\n\"MATLAB is I guess part of the programming language that makes it very easy to write codes using matrices, to write code for numerical routines, to move data around, to plot data. And it's sort of an extremely easy to learn tool to use for implementing a lot of learning algorithms.\"\n----------------------------------------------------------------------------------------------------\nDocument 2:\n\n\"MATLAB is I guess part of the programming language that makes it very easy to write codes using matrices, to write code for numerical routines, to move data around, to plot data. And it's sort of an extremely easy to learn tool to use for implementing a lot of learning algorithms.\"\n----------------------------------------------------------------------------------------------------\nDocument 3:\n\n\"And the student said, \"Oh, it was the MATLAB.\" So for those of you that don't know MATLAB yet, I hope you do learn it. It's not hard, and we'll actually have a short MATLAB tutorial in one of the discussion sections for those of you that don't know it.\"\n----------------------------------------------------------------------------------------------------\nDocument 4:\n\n\"And the student said, \"Oh, it was the MATLAB.\" So for those of you that don't know MATLAB yet, I hope you do learn it. It's not hard, and we'll actually have a short MATLAB tutorial in one of the discussion sections for those of you that don't know it.\"\n```\n\n# Combining Various Techniques\n\n## ContextualCompressionRetriever with MMR\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ncompression_retriever = ContextualCompressionRetriever(\n    base_compressor=compressor,\n    base_retriever=vectordb.as_retriever(search_type=\"mmr\")\n)\n```\n:::\n\n\n## Question\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nquestion = \"what did they say about matlab?\"\n```\n:::\n\n\n - Retriever\n\n. . .\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ncompressed_docs = compression_retriever.get_relevant_documents(question)\n```\n:::\n\n\n## Result\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\npretty_print_docs(compressed_docs)\n```\n:::\n\n\n```markdown\n\nDocument 1:\n\n\"MATLAB is I guess part of the programming language that makes it very easy to write codes using matrices, to write code for numerical routines, to move data around, to plot data. And it's sort of an extremely easy to learn tool to use for implementing a lot of learning algorithms.\"\n----------------------------------------------------------------------------------------------------\nDocument 2:\n\n\"And the student said, \"Oh, it was the MATLAB.\" So for those of you that don't know MATLAB yet, I hope you do learn it. It's not hard, and we'll actually have a short MATLAB tutorial in one of the discussion sections for those of you that don't know it.\"\n```\n\n# Other Types of Retrieval\n\n## Basics\n\n- It's worth noting that vectordb as not the only kind of tool to retrieve documents. \n\n- The `LangChain` retriever abstraction includes other ways to retrieve documents, such as TF-IDF or SVM.\n\n\n## Load \n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# Load PDF\nloader = PyPDFLoader(\"../docs/cs229_lectures/MachineLearning-Lecture01.pdf\")\n\npages = loader.load()\n\nall_page_text = [p.page_content for p in pages]\n\njoined_page_text = \" \".join(all_page_text)\n```\n:::\n\n\n## Split \n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# Split\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1500, chunk_overlap=150)\n\nsplits = text_splitter.split_text(joined_page_text)\n```\n:::\n\n\n## Retrieve with SVM and TF-IDF\n\n- [Support vector machine (SVMs) retriever](https://python.langchain.com/docs/integrations/retrievers/svm)\n\n. . .\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# Retrieve\nsvm_retriever = SVMRetriever.from_texts(splits, embedding)\n```\n:::\n\n\n- [TF-IDF: term-frequency times inverse document-frequency retriever](https://python.langchain.com/docs/integrations/retrievers/tf_idf)\n\n. . .\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ntfidf_retriever = TFIDFRetriever.from_texts(splits)\n```\n:::\n\n\n## SVM retriever {.smaller}\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nquestion = \"What are major topics for this class?\"\n\ndocs_svm = svm_retriever.get_relevant_documents(question)\ndocs_svm[0]\n```\n:::\n\n\n- Document(page_content='don\\'t have a MATLAB license, for the purposes of  this class, there\\'s also — [inaudible] \\nwrite that down [inaudible] MATLAB — there\\' s also a software package called Octave \\nthat you can download for free off the Internet. And it has somewhat fewer features than MATLAB, but it\\'s free, and for the purposes of  this class, it will work for just about \\neverything.  \\nSo actually I, well, so yeah, just a side comment for those of you that haven\\'t seen \\nMATLAB before I guess, once a colleague of mine at a different university, not at \\nStanford, actually teaches another machine l earning course. He\\'s taught it for many years. \\nSo one day, he was in his office, and an old student of his from, lik e, ten years ago came \\ninto his office and he said, \"Oh, professo r, professor, thank you so much for your \\nmachine learning class. I learned so much from it. There\\'s this stuff that I learned in your \\nclass, and I now use every day. And it\\'s help ed me make lots of money, and here\\'s a \\npicture of my big house.\"  \\nSo my friend was very excited. He said, \"W ow. That\\'s great. I\\'m glad to hear this \\nmachine learning stuff was actually useful. So what was it that you learned? Was it \\nlogistic regression? Was it the PCA? Was it the data ne tworks? What was it that you \\nlearned that was so helpful?\" And the student said, \"Oh, it was the MATLAB.\"  \\nSo for those of you that don\\'t know MATLAB yet, I hope you do learn it. It\\'s not hard,', metadata={})\n\n## TFIDF retriever {.smaller}\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nquestion = \"what did they say about matlab?\"\n\ndocs_tfidf = tfidf_retriever.get_relevant_documents(question)\n\ndocs_tfidf[0]\n```\n:::\n\n\n- Document(page_content=\"Saxena and Min Sun here did, wh ich is given an image like this, right? This is actually a \\npicture taken of the Stanford campus. You can apply that sort of cl ustering algorithm and \\ngroup the picture into regions. Let me actually blow that up so that you can see it more \\nclearly. Okay. So in the middle, you see the lines sort of groupi ng the image together, \\ngrouping the image into [inaudible] regions.  \\nAnd what Ashutosh and Min did was they then  applied the learning algorithm to say can \\nwe take this clustering and us e it to build a 3D model of the world? And so using the \\nclustering, they then had a lear ning algorithm try to learn what the 3D structure of the \\nworld looks like so that they could come up with a 3D model that you can sort of fly \\nthrough, okay? Although many people used to th ink it's not possible to take a single \\nimage and build a 3D model, but using a lear ning algorithm and that sort of clustering \\nalgorithm is the first step. They were able to.  \\nI'll just show you one more example. I like this  because it's a picture of Stanford with our \\nbeautiful Stanford campus. So again, taking th e same sort of clustering algorithms, taking \\nthe same sort of unsupervised learning algor ithm, you can group the pixels into different \\nregions. And using that as a pre-processing step, they eventually built this sort of 3D model of Stanford campus in a single picture.  You can sort of walk  into the ceiling, look\", metadata={})\n\n# Acknowledgments\n\n- This tutorial is mainly based on the excellent course [\"LangChain: Chat with Your DataI\"](https://www.deeplearning.ai/short-courses/langchain-chat-with-your-data/) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** 👍\n\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-rag/)**\n\n",
    "supporting": [
      "04_retrieval_files"
    ],
    "filters": [],
    "includes": {}
  }
}