{
  "hash": "3eef8878a764c6f1f3c0843438fbe679",
  "result": {
    "markdown": "---\ntitle: Tagging and Extraction Using OpenAI functions\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: Tutorial 4\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Tagging and Extraction Using OpenAI functions\n\n\n# Setup {.smaller}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport openai\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) \nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom typing import List\nfrom pydantic import BaseModel, Field\nfrom langchain.utils.openai_functions import convert_pydantic_to_openai_function\n\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n\nfrom langchain.output_parsers.openai_functions import JsonOutputFunctionsParser\nfrom langchain.output_parsers.openai_functions import JsonKeyOutputFunctionsParser\n\nfrom typing import Optional\n\nfrom langchain.document_loaders import WebBaseLoader\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\nfrom langchain.schema.runnable import RunnableLambda\n```\n:::\n\n\n# Tagging\n\n## Create tagging class\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass Tagging(BaseModel):\n    \"\"\"Tag the piece of text with particular info.\"\"\"\n    sentiment: str = Field(description=\"sentiment of text, should be `pos`, `neg`, or `neutral`\")\n    language: str = Field(description=\"language of text (should be ISO 639-1 code)\")\n```\n:::\n\n\n## Take a look at the class\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nconvert_pydantic_to_openai_function(Tagging)\n```\n:::\n\n\n{'name': 'Tagging',\n 'description': 'Tag the piece of text with particular info.',\n 'parameters': {'title': 'Tagging',\n  'description': 'Tag the piece of text with particular info.',\n  'type': 'object',\n  'properties': {'sentiment': {'title': 'Sentiment',\n    'description': 'sentiment of text, should be `pos`, `neg`, or `neutral`',\n    'type': 'string'},\n   'language': {'title': 'Language',\n    'description': 'language of text (should be ISO 639-1 code)',\n    'type': 'string'}},\n  'required': ['sentiment', 'language']}}\n\n\n## Create model, tagging function and prompt\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nmodel = ChatOpenAI(temperature=0)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntagging_functions = [convert_pydantic_to_openai_function(Tagging)]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprompt = ChatPromptTemplate.from_messages([\n    (\"system\", \"Think carefully, and then tag the text as instructed\"),\n    (\"user\", \"{input}\")\n])\n```\n:::\n\n\n## Bind model to tagging function and create chain\n\nWe force the model to use the tagging functions\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nmodel_with_functions = model.bind(\n    functions=tagging_functions,\n    function_call={\"name\": \"Tagging\"}\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntagging_chain = prompt | model_with_functions\n```\n:::\n\n\n## Call the function\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntagging_chain.invoke({\"input\": \"I like the book Sapiens\"})\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'Tagging', 'arguments': '{\\n  \"sentiment\": \"pos\",\\n  \"language\": \"en\"\\n}'}})\n\n. . . \n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntagging_chain.invoke({\"input\": \"Das 'Buch Eine Anleitung zum guten Leben: Wie Sie die alte Kunst des Stoizismus' ist sehr lesenswert\"})\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'Tagging', 'arguments': '{\\n  \"sentiment\": \"pos\",\\n  \"language\": \"de\"\\n}'}})\n\n\n## Use output parser\n\n- Obtain a cleaner result with `JsonOutputFunctionsParser()`\n\n. . .\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntagging_chain = prompt | model_with_functions | JsonOutputFunctionsParser()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntagging_chain.invoke({\"input\": \"Das 'Buch Eine Anleitung zum guten Leben: Wie Sie die alte Kunst des Stoizismus' ist sehr lesenswert\"})\n```\n:::\n\n\n- {'sentiment': 'pos', 'language': 'de'}\n\n# Extraction\n\nExtraction is similar to tagging, but used for extracting multiple pieces of information.\n\n## Define class \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nclass Person(BaseModel):\n    \"\"\"Information about a person.\"\"\"\n    name: str = Field(description=\"person's name\")\n    age: Optional[int] = Field(description=\"person's age\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nclass Information(BaseModel):\n    \"\"\"Information to extract.\"\"\"\n    people: List[Person] = Field(description=\"List of info about people\")\n```\n:::\n\n\n## Convert Pydantic to OpenAI function\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nconvert_pydantic_to_openai_function(Information)\n```\n:::\n\n\n{'name': 'Information',\n 'description': 'Information to extract.',\n 'parameters': {'title': 'Information',\n  'description': 'Information to extract.',\n  'type': 'object',\n  'properties': {'people': {'title': 'People',\n    'description': 'List of info about people',\n    'type': 'array',\n    'items': {'title': 'Person',\n     'description': 'Information about a person.',\n     'type': 'object',\n     'properties': {'name': {'title': 'Name',\n       'description': \"person's name\",\n       'type': 'string'},\n      'age': {'title': 'Age',\n       'description': \"person's age\",\n       'type': 'integer'}},\n     'required': ['name']}}},\n  'required': ['people']}}\n\n\n## Set up model\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nextraction_functions = [convert_pydantic_to_openai_function(Information)]\n\nextraction_model = model.bind(functions=extraction_functions, function_call={\"name\": \"Information\"})\n```\n:::\n\n\n## Test model\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nextraction_model.invoke(\"Joe is 30, his mom is Martha\")\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'Information', 'arguments': '{\\n  \"people\": [\\n    {\\n      \"name\": \"Joe\",\\n      \"age\": 30\\n    },\\n    {\\n      \"name\": \"Martha\",\\n      \"age\": 0\\n    }\\n  ]\\n}'}})\n\n- Model inputs age 0 if age isn't provided\n\n\n## Update prompt {.smaller}\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nprompt = ChatPromptTemplate.from_messages([\n    (\"system\", \"Extract the relevant information, if not explicitly provided do not guess. Extract partial info\"),\n    (\"human\", \"{input}\")\n])\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nextraction_chain = prompt | extraction_model\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nextraction_chain.invoke({\"input\": \"Joe is 30, his mom is Martha\"})\n```\n:::\n\n\n- AIMessage(content='', additional_kwargs={'function_call': {'name': 'Information', 'arguments': '{\\n  \"people\": [\\n    {\\n      \"name\": \"Joe\",\\n      \"age\": 30\\n    },\\n    {\\n      \"name\": \"Martha\"\\n    }\\n  ]\\n}'}})\n\n\n## Parse output\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nextraction_chain = prompt | extraction_model | JsonOutputFunctionsParser()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nextraction_chain.invoke({\"input\": \"Joe is 30, his mom is Martha\"})\n```\n:::\n\n\n- {'people': [{'name': 'Joe', 'age': 30}, {'name': 'Martha'}]}\n\n\n## Use different output parser\n\n- Use `JsonKeyOutputFunctionsParser()`to only extract relevant info\n\n. . .\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nextraction_chain = prompt | extraction_model | JsonKeyOutputFunctionsParser(key_name=\"people\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nextraction_chain.invoke({\"input\": \"Joe is 30, his mom is Martha\"})\n```\n:::\n\n\n- [{'name': 'Joe', 'age': 30}, {'name': 'Martha'}]\n\n# Blog post example\n\nWe can apply tagging and axtracting to a larger body of text.\n\nFor example, let's load a blog post and provide tag information from a sub-set of the text.\n\nFurthermore, we want \n\n\n## Load document\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nloader = WebBaseLoader(\"https://lilianweng.github.io/posts/2023-06-23-agent/\")\n\ndocuments = loader.load()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndoc = documents[0]\n```\n:::\n\n\n## Inspect content {.smaller}\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\npage_content = doc.page_content[:10000]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nprint(page_content[:1000])\n```\n:::\n\n\n. . .\n\n```markdown\nLLM Powered Autonomous Agents | Lil'Log\n\nLil'Log\n\nPosts\n\nArchive\n\nSearch\n\nTags\n\nFAQ\n\nemojisearch.app\n\n      LLM Powered Autonomous Agents\n    \nJune 23, 2023 · 31 min · Lilian Weng\n\nTable of Contents\nAgent System Overview\nComponent One: Planning\nTask Decomposition\nSelf-Reflection\nComponent Two: Memory\nTypes of Memory\nMaximum Inner Product Search (MIPS)\nComponent Three: Tool Use\nCase Studies\nScientific Discovery Agent\nGenerative Agents Simulation\nProof-of-Concept Examples\nChallenges\nCitation\nReferences\n\nBuilding agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview#\nIn\n```\n\n# Blog post tagging\n\n## Create class to create article overview and tags\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nclass Overview(BaseModel):\n    \"\"\"Overview of a section of text.\"\"\"\n    summary: str = Field(description=\"Provide a concise summary of the content.\")\n    language: str = Field(description=\"Provide the language that the content is written in.\")\n    keywords: str = Field(description=\"Provide keywords related to the content.\")\n```\n:::\n\n\n## Setup the chain\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\noverview_tagging_function = [\n    convert_pydantic_to_openai_function(Overview)\n]\n\ntagging_model = model.bind(\n    functions=overview_tagging_function,\n    function_call={\"name\":\"Overview\"}\n)\n\ntagging_chain = prompt | tagging_model | JsonOutputFunctionsParser()\n```\n:::\n\n\n## Invoke chain\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ntagging_chain.invoke({\"input\": page_content})\n```\n:::\n\n\n- {'summary': 'This article discusses the concept of building autonomous agents powered by LLM (large language model) as their core controller. It explores the key components of such agents, including planning, memory, and tool use. It also covers various techniques for task decomposition and self-reflection in autonomous agents.',\n 'language': 'English',\n 'keywords': 'LLM, autonomous agents, planning, memory, tool use, task decomposition, self-reflection'}\n\n# Blog post extraction\n\n## Define class to extract papers\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nclass Paper(BaseModel):\n    \"\"\"Information about papers mentioned.\"\"\"\n    title: str\n    author: Optional[str]\n\n\nclass Info(BaseModel):\n    \"\"\"Information to extract\"\"\"\n    papers: List[Paper]\n```\n:::\n\n\n## Setup extraction chain\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\npaper_extraction_function = [\n    convert_pydantic_to_openai_function(Info)\n]\n\nextraction_model = model.bind(\n    functions=paper_extraction_function, \n    function_call={\"name\":\"Info\"}\n)\n\nextraction_chain = prompt | extraction_model | JsonKeyOutputFunctionsParser(key_name=\"papers\")\n```\n:::\n\n\n## Invoke chain\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nextraction_chain.invoke({\"input\": page_content})\n```\n:::\n\n\n- [{'title': 'LLM Powered Autonomous Agents', 'author': 'Lilian Weng'}]\n\n\n## Update sytem message {.smaller}\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ntemplate = \"\"\"A article will be passed to you. Extract from it all papers that are mentioned by this article. \n\nDo not extract the name of the article itself. If no papers are mentioned that's fine - you don't need to extract any! Just return an empty list.\n\nDo not make up or guess ANY extra information. Only extract what exactly is in the text.\"\"\"\n\nprompt = ChatPromptTemplate.from_messages([\n    (\"system\", template),\n    (\"human\", \"{input}\")\n])\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nextraction_chain = prompt | extraction_model | JsonKeyOutputFunctionsParser(key_name=\"papers\")\n```\n:::\n\n\n## Invoke chain\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nextraction_chain.invoke({\"input\": page_content})\n```\n:::\n\n\n- [{'title': 'Chain of thought (CoT; Wei et al. 2022)', 'author': 'Wei et al.'},\n {'title': 'Tree of Thoughts (Yao et al. 2023)', 'author': 'Yao et al.'},\n {'title': 'LLM+P (Liu et al. 2023)', 'author': 'Liu et al.'},\n {'title': 'ReAct (Yao et al. 2023)', 'author': 'Yao et al.'},\n {'title': 'Reflexion (Shinn & Labash 2023)', 'author': 'Shinn & Labash'},\n {'title': 'Chain of Hindsight (CoH; Liu et al. 2023)',\n  'author': 'Liu et al.'},\n {'title': 'Algorithm Distillation (AD; Laskin et al. 2023)',\n  'author': 'Laskin et al.'}]\n\n\n## Test chain\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nextraction_chain.invoke({\"input\": \"hi\"})\n```\n:::\n\n\n- []\n\n# Extraction for the complete blog post\n\n\n## Split the text\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ntext_splitter = RecursiveCharacterTextSplitter(chunk_overlap=0)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nsplits = text_splitter.split_text(doc.page_content)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nlen(splits)\n```\n:::\n\n\n- 14\n\n## Create function to join the lists\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ndef flatten(matrix):\n    flat_list = []\n    for row in matrix:\n        flat_list += row\n    return flat_list\n```\n:::\n\n\n- Test the function\n\n. . .\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nflatten([[1, 2], [3, 4]])\n```\n:::\n\n\n- [1, 2, 3, 4]\n\n## Take a look at the splits\n\n- The splits are just text. \n- We need to convert them to a dictionary where the text is the input key.\n\n. . .\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nprint(splits[0])\n```\n:::\n\n\n## Use RunnableLambda to create function\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nprep = RunnableLambda(\n    lambda x: [{\"input\": doc} for doc in text_splitter.split_text(x)]\n)\n```\n:::\n\n\n- Test function\n\n. . .\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nprep.invoke(\"hi\")\n```\n:::\n\n\n- [{'input': 'hi'}]\n\n\n## Create chain\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nchain = prep | extraction_chain.map() | flatten\n```\n:::\n\n\n- `extraction_chain` operates over a single element\n\n- However, we have a list of elements\n\n- Therefore, we call `.map()`\n\n\n## Invoke chain {.smaller}\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nchain.invoke(doc.page_content)\n```\n:::\n\n\n```json\n[{'title': 'AutoGPT', 'author': ''},\n {'title': 'GPT-Engineer', 'author': ''},\n {'title': 'BabyAGI', 'author': ''},\n {'title': 'Chain of thought (CoT; Wei et al. 2022)', 'author': 'Wei et al.'},\n {'title': 'Tree of Thoughts (Yao et al. 2023)', 'author': 'Yao et al.'},\n {'title': 'LLM+P (Liu et al. 2023)', 'author': 'Liu et al.'},\n {'title': 'ReAct (Yao et al. 2023)', 'author': 'Yao et al.'},\n {'title': 'Reflexion (Shinn & Labash 2023)', 'author': 'Shinn & Labash'},\n {'title': 'Reflexion framework', 'author': 'Shinn & Labash'},\n {'title': 'Chain of Hindsight', 'author': 'Liu et al. 2023'},\n {'title': 'Algorithm Distillation', 'author': 'Laskin et al. 2023'},\n {'title': 'Algorithm Distillation', 'author': 'Laskin et al. 2023'},\n {'title': 'ED (expert distillation)', 'author': ''},\n {'title': 'RL^2', 'author': 'Duan et al. 2017'},\n {'title': 'LSH: Locality-Sensitive Hashing', 'author': ''},\n {'title': 'ANNOY: Approximate Nearest Neighbors Oh Yeah', 'author': ''},\n {'title': 'HNSW: Hierarchical Navigable Small World', 'author': ''},\n {'title': 'FAISS: Facebook AI Similarity Search', 'author': ''},\n {'title': 'ScaNN: Scalable Nearest Neighbors', 'author': ''},\n {'title': 'MRKL: Modular Reasoning, Knowledge and Language',\n  'author': 'Karpas et al. 2022'},\n {'title': 'TALM: Tool Augmented Language Models',\n  'author': 'Parisi et al. 2022'},\n {'title': 'Toolformer', 'author': 'Schick et al. 2023'},\n {'title': 'HuggingGPT', 'author': 'Shen et al. 2023'},\n {'title': 'API-Bank', 'author': 'Li et al. 2023'},\n {'title': 'ChemCrow', 'author': 'Bran et al. 2023'},\n {'title': 'Boiko et al. (2023)', 'author': 'Boiko et al.'},\n {'title': 'Generative Agents Simulation', 'author': 'Park, et al. 2023'},\n {'title': 'Park et al. 2023', 'author': ''},\n {'title': 'Super Mario: How Nintendo Conquered America',\n  'author': 'Jeff Ryan'},\n {'title': 'Model-View-Controller (MVC) Explained', 'author': 'Techopedia'},\n {'title': 'Python Game Development: Creating a Snake Game',\n  'author': 'Real Python'},\n {'title': 'Paper A', 'author': 'Author A'},\n {'title': 'Paper B', 'author': 'Author B'},\n {'title': 'Paper C', 'author': 'Author C'},\n {'title': 'Chain of thought prompting elicits reasoning in large language models',\n  'author': 'Wei et al.'},\n {'title': 'Tree of Thoughts: Deliberate Problem Solving with Large Language Models',\n  'author': 'Yao et al.'},\n {'title': 'Chain of Hindsight Aligns Language Models with Feedback',\n  'author': 'Liu et al.'},\n {'title': 'LLM+P: Empowering Large Language Models with Optimal Planning Proficiency',\n  'author': 'Liu et al.'},\n {'title': 'ReAct: Synergizing reasoning and acting in language models',\n  'author': 'Yao et al.'},\n {'title': 'Reflexion: an autonomous agent with dynamic memory and self-reflection',\n  'author': 'Shinn & Labash'},\n {'title': 'In-context Reinforcement Learning with Algorithm Distillation',\n  'author': 'Laskin et al.'},\n {'title': 'MRKL Systems A modular, neuro-symbolic architecture that combines large language models, external knowledge sources and discrete reasoning',\n  'author': 'Karpas et al.'},\n {'title': 'API-Bank: A Benchmark for Tool-Augmented LLMs',\n  'author': 'Li et al.'},\n {'title': 'HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in HuggingFace',\n  'author': 'Shen et al.'},\n {'title': 'ChemCrow: Augmenting large-language models with chemistry tools',\n  'author': 'Bran et al.'},\n {'title': 'Emergent autonomous scientific research capabilities of large language models',\n  'author': 'Boiko et al.'},\n {'title': 'Generative Agents: Interactive Simulacra of Human Behavior',\n  'author': 'Joon Sung Park, et al.'}]\n```\n\n# Acknowledgments\n\n- This tutorial is mainly based on the excellent course [\"Functions, Tools and Agents with LangChain\"](https://www.deeplearning.ai/short-courses/functions-tools-agents-langchain/?) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** 👍\n\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-functions/)**\n\n",
    "supporting": [
      "04_tagging_extraction_files"
    ],
    "filters": [],
    "includes": {}
  }
}