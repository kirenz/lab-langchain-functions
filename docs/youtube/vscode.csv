,Text,Metadata
0,"('page_content', ""In just three years, Visual Studio Code has gone from being non-existent to the single most popular code editor among all developers, according to the Stack Overflow 2018 survey. I personally like it because it's minimal yet super powerful and free and open source. In this episode, I'll show you exactly what I mean by taking you through my top 10 pro tips for using VS Code effectively. If you're new here, hit subscribe and you'll find a full write-up on angularfirebase.com. The first thing you should know is how to get around the file system quickly. You can open up VS Code by running code from the command line with the directory you want to open. The quickest way to move around is to memorize a few hotkeys or keybindings. If you hit Ctrl-K, it'll bring up a full list of keybindings that you can search through and customize as needed. But the single most important one is Ctrl-P, which brings up the command palette. We'll be using the command palette a lot in this video, so don't forget this one. To navigate between files, you can simply start typing the file name and it will automatically search through your tree to find the corresponding file. That's way quicker than trying to navigate through a directory tree by clicking. But sometimes you might want to bookmark specific lines of code and navigate to them later. For that, I recommend using a bookmark plugin, which will allow us to highlight a block of code, set a bookmark number for it, and then easily navigate to it later on using the command palette in VS Code. As you've probably noticed, I'm here in an Angular project, so I'm going to install some snippets to generate a lot of the boilerplate code for me. In Angular, we have two really good snippet libraries, one from Mike Moreland and one from John Papa, and you can use them both together. When you install snippets, they're automatically added to the VS Code IntelliSense, so say I need to code up something really tedious like an ng-switch statement, I can simply start typing the prefix in the snippet library and it will automatically generate this code for me. There's even snippets available for libraries like Angular Material, ng-xs, and many others. Number 8 is VS Code's integrated command line terminal. You can pull it up by simply dragging from the bottom of the screen, or you can use the Ctrl-Backtick keybinding. You can also pull up the command palette with Ctrl-P and open it there. What's really cool is that VS Code will automatically recognize scripts that you have set up in your project. In JavaScript, you probably have something set up with npm or maybe with grunt or gulp. You can simply type in npm and it will show all of your scripts right there automatically, so you can run them without ever having to type anything. With that, we can segue into the next major feature, which is IntelliSense. IntelliSense is just a fancy word for code auto-completion, and if you use a language that's strong-typed like TypeScript, you'll get incredible developer tooling in VS Code. You'll see this automatically as you're coding, but you can pull it up manually with Ctrl-Space as well. Code completion's pretty self-explanatory, but there's some pretty cool things you can do with it. Let's say we're going into a large TypeScript file for the first time, and we want to see all the methods and classes that are defined in this file. We can go into the command palette, type in the at symbol, and that will give us all of the interfaces, methods, and properties defined in this file. In a strong-type language, another thing you might want to do is peak the type definitions for a given interface. It can be really disruptive to have multiple files open at once looking for different type definitions, but you can simply click on an interface and say Peak Definition, and it will find that in your project, even if it's buried in your node modules, and show you the properties on that interface. On the flip side of this, you might be looking at an interface and want to know how many references you have to it in a project. If you right-click and go to Find References, it will show you exactly which files are referencing this interface in your project. But let's say I'm working with an interface, and I decide I don't like the name of it. I can highlight it, then right-click and say Rename Symbol, or just hit F2, and give it a new name. That not only updates the current file, but also every other file in the project with that reference. And that's a lot safer than using just a regular Find and Replace, because it's looking at the actual code reference, and not the text itself. Yet another good reason to strong-type your code. Now while we're on the topic of types, I want to show you this really cool extension called Paste JSON as Code. Almost all apps make calls to APIs that return JSON, but you might not have an easy way to actually strong-type this response in your project. I'm in the Twitter API right now, and I'm just going to copy and paste this example response in JSON format. I'll go ahead and paste the JSON into a tweet.json file, and then create a new file called tweet.ts. Then I can open up the command palette, and just enter the Paste as JSON command, and we'll set the top-level interface name as tweet. And then magically, we get this whole set of interfaces that model this API response. So that means you can get incredible developer tooling for any API that you work with, whether it has types or not. Okay, I think I've heard just about enough of types, let's just chill out for a second. Hit Ctrl-K-Z to go into Zen mode. This will give us a viewport with all of the distractions removed. If you don't care what your Docker container is doing, or what the git status is, you can just go into Zen mode and focus on writing code. While we're at it, let's install the Spotify extension for VS Code, and throw on some carbon-based life forms and just chill out. But unfortunately, we relaxed a little too hard, and now our application is broken. Let's go into the debugger panel and see how that might be able to help us out. You get to the debugger by clicking on the bug icon, and I have a simple node script set up here. Node works out of the box, but you can also install extensions to support different runtimes. In this script, I have two separate functions that are each updating a global variable, and we'll just run these one after the other. I can set up breakpoints in my code by simply adding a red dot in between the line numbers. This will stop the execution of the script once it hits this breakpoint, and then you can inspect the local state and the call stack and things like that. All I have to do is click the play button, and it will automatically attach the debugger to this process. You can see here it shows all of the local variables, as well as all of our global variables in Node. You can also go down to the debugger console and start executing commands within the context of this script, and we'll have access to its current state. So if we want to inspect the name of a variable, we just type it down here in the command line, and it will print that out in the console. Running Node is great, but generally my front-end apps are a lot more complex than my back-end apps. I'd like to debug my Angular applications in the context of the Chrome browser. After installing the Chrome extension, we can go back to the debugger and click the play button, but this time use Chrome. Then we can set up a launch configuration for this specific app, which in Angular's case it'll be served on localhost 4200. Then we can go into one of our component files and set up some breakpoints where we want to have the debugger run in the browser. I'll set up one breakpoint before the component's actually initialized, and then another one that will run on a button click. Then you can see if we click play, it will launch Chrome and have our debugger running here, which we can control from VS Code. When we click play again, it will define the title, and we can actually highlight over properties in the code and it will tell us the state of the data. Managing state in a web application is one of the biggest challenges, and this debugger can really help you do that more effectively. Another huge way that VS Code helps you out is with your git version control. Dealing with git in a large project gets pretty hard to do from the command line. You might have already noticed that VS Code automatically highlights all of your files, untracked or new files are green, modified files are yellow, and files with linting errors are red. If we want to commit some changes, we can just go into the git tab, add our commit message, and we're done. We don't have to do any git add or git flag message from the command line. But what if we actually didn't mean to commit that code? Well, we can come up here to the options menu and just roll back that commit. And you can run pretty much every other git command from this menu as well. If we want to revert some changes on a specific file, we can simply do that by clicking this revert button and that will discard all of the changes that we made. Or if we just want to commit a couple files individually, we can click the plus button and that will only stage those files for your next commit. So that's super powerful on its own, but I want to know about the git status pretty much everywhere in my code. I want to know who changed what and when it was changed, because I'm working with a team of junior developers and they keep screwing things up. We can install GitLens from the extensions page, and then if we go back to the git tab you'll see that we have an additional panel here with all of the GitLens data. It makes it a lot easier to traverse the git tree and also deal with things like stashes and tags and also your remote repositories. But it doesn't just stop at the git panel, it actually annotates all of your code with information about Git. If we go into a file and just hover over a piece of code, it will tell us exactly who wrote that code, when they wrote it, and its commit ID. This brings us to VS Code Live Share, which is a brand new feature in the editor. It allows you to connect your GitHub or Azure account to VS Code and then collaborate with multiple team members on a single document in real time. It's kind of like the Google Docs of writing code. I've been able to use this with some Angular Firebase Pro members to collaborate on issues and it's been super useful. You can install the extension and you'll need to connect a GitHub account or a Microsoft account. After that, it's just a matter of clicking share and VS Code will return a link that you can pass along to other team members. I probably could have covered about 90 other topics in this video, but I'm going to go ahead and wrap things up there. If it helped you, please like and subscribe. And if you're serious about building apps, consider becoming a Pro member at angularfirebase.com. We can write code together using VS Code Live Share and work on strategies to get your app built and shipped as soon as possible. Thanks for watching and I'll talk to you soon."")","('metadata', {'source': 'docs/youtube/VS Code Top-Ten Pro Tips.m4a', 'chunk': 0})"
