---
title: "Slides"
number-sections: true
---


*The following tutorials are mainly based on the excellent course ["Functions, Tools and Agents with LangChain"](https://www.deeplearning.ai/short-courses/functions-tools-agents-langchain/?) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.*


::: {.callout-note appearance="simple"}
Take a look at the [slides tutorial](https://kirenz.github.io/lab-toolkit/slides/slides.html#/title-slide) to learn how to use all slide options. 
:::

You have several options to start code development:

1. **Colab**: Click on one of the links "üíª Jupyter Notebook" to start a Colab session. 

2. **Local**: Click on one of the links "üíª Jupyter Notebook" below, go to the Colab menu and choose "File" > "Download" > "Download .ipynb"

3. **Cloud Codespace**: Work in a fully configured dev environment in the cloud with a [GitHub Codespace VS Code Browser](https://github.com/kirenz/lab-langchain-functions/blob/main/README.md) environment.

4. **Local VS Code with Codespace**: Use [GitHub Codespaces in your local Visual Studio Code environment](https://docs.github.com/en/codespaces/developing-in-codespaces/using-github-codespaces-in-visual-studio-code).



## OpenAI Function Calling


::: {.callout-tip appearance="simple" icon=false}
- [üñ•Ô∏è Presentation](/slides/01_openai_functions.qmd)
- [üíª Jupyter Notebook](https://colab.research.google.com/github/kirenz/lab-langchain-functions/blob/main/code/01_openai_functions.ipynb)

:::


## LangChain Expression Language (LCEL)

::: {.callout-tip appearance="simple" icon=false}
- [üñ•Ô∏è Presentation](/slides/02_lcel.qmd)
- [üíª Jupyter Notebook](https://colab.research.google.com/github/kirenz/lab-langchain-functions/blob/main/code/02_lcel.ipynb)
:::

## OpenAI Function Calling In LangChain

::: {.callout-tip appearance="simple" icon=false}
- [üñ•Ô∏è Presentation](/slides/03_function_calling.qmd)
- [üíª Jupyter Notebook](https://colab.research.google.com/github/kirenz/lab-langchain-functions/blob/main/code/03_function_calling.ipynb)
:::

## Tagging and Extraction Using OpenAI functions

::: {.callout-tip appearance="simple" icon=false}
- [üñ•Ô∏è Presentation](/slides/04_tagging_extraction.qmd)
- [üíª Jupyter Notebook](https://colab.research.google.com/github/kirenz/lab-langchain-functions/blob/main/code/04_tagging_extraction.ipynb)
:::


## Tools and Routing

::: {.callout-tip appearance="simple" icon=false}
- [üñ•Ô∏è Presentation](/slides/05_tools_routing.qmd)
- [üíª Jupyter Notebook](https://colab.research.google.com/github/kirenz/lab-langchain-functions/blob/main/code/05_tools_routing.ipynb)
:::

## Chat System

Learn how to track and select pertinent information from conversations and data sources, as you build your own chatbot using LangChain.

::: {.callout-tip appearance="simple" icon=false}
- [üñ•Ô∏è Presentation](/slides/06_functional_conversation.qmd)
- [üíª Jupyter Notebook](https://colab.research.google.com/github/kirenz/lab-langchain-functions/blob/main/code/06_functional_conversation.ipynb)
:::

## LangChain cookbook

Some example code for building applications with LangChain, with an emphasis on more applied and end-to-end examples (see [this site](https://github.com/langchain-ai/langchain/tree/master/cookbook) for more examples):

- [Semi-structured RAG](https://github.com/langchain-ai/langchain/blob/master/cookbook/Semi_Structured_RAG.ipynb): This cookbook shows how to perform RAG on documents with semi-structured data (e.g. PDF with tables and text)


